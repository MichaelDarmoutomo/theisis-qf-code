paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
x = c(0.4740, 0.7363)
start_time = Sys.time()
print(paste("Starting at",start_time))
cec = pension_fund(x, e, config$nSim)
print(paste("Stopping at",Sys.time()))
print(paste("Total runtime ", Sys.time() - start_time))
library(config)
rm(list=ls())
Sys.setenv(R_CONFIG_ACTIVE = "pension_fund")
config <- config::get()
source("pensionfund/pension_fund.R")
source("pensionfund/adjustment_factor.R")
source("simulation.R")
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
x = c(0.4740, 0.7363)
start_time = Sys.time()
print(paste("Starting at",start_time))
cec = pension_fund(x, e, config$nSim)
print(paste("Stopping at",Sys.time()))
print(paste("Total runtime ", Sys.time() - start_time))
library(config)
rm(list=ls())
Sys.setenv(R_CONFIG_ACTIVE = "pension_fund")
config <- config::get()
source("pensionfund/pension_fund.R")
source("pensionfund/adjustment_factor.R")
source("simulation.R")
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
x = c(0.4740, 0.7363)
start_time = Sys.time()
print(paste("Starting at",start_time))
cec = pension_fund(x, e, config$nSim)
cec = pension_fund(x, e, config$nSim)
L[year]
L[year]
A[year]
A[year-1]
A[year-1] * ( x[1] * (1 + E$dS_[year,s]) + (1 - x[1] - x[2]) * (1 + E$r[year,s]) ) + x[2] * CR[year-1] * L[year]
A[year]/A[year-1]
A[year]/A[year-1]
(A[year]-A[year-1])/A[year-1]
(A[year]-A[year-1])/A[year-1]*100
library(config)
rm(list=ls())
Sys.setenv(R_CONFIG_ACTIVE = "pension_fund")
config <- config::get()
source("pensionfund/pension_fund.R")
source("pensionfund/adjustment_factor.R")
source("simulation.R")
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
x = c(0.4740, 0.7363)
start_time = Sys.time()
print(paste("Starting at",start_time))
cec = pension_fund(x, e, config$nSim)
print(paste("Stopping at",Sys.time()))
print(paste("Total runtime ", Sys.time() - start_time))
library(config)
rm(list=ls())
Sys.setenv(R_CONFIG_ACTIVE = "pension_fund")
config <- config::get()
source("pensionfund/pension_fund.R")
source("pensionfund/adjustment_factor.R")
source("simulation.R")
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
x = c(0.4740, 0.7363)
x = c(0.4740, 0)
start_time = Sys.time()
print(paste("Starting at",start_time))
cec = pension_fund(x, e, config$nSim)
print(paste("Stopping at",Sys.time()))
print(paste("Total runtime ", Sys.time() - start_time))
library(config)
rm(list=ls())
Sys.setenv(R_CONFIG_ACTIVE = "pension_fund")
config <- config::get()
source("pensionfund/pension_fund.R")
source("pensionfund/adjustment_factor.R")
source("simulation.R")
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
x = c(0.4740, 0.7363)
x = c(0.4740, 0)
start_time = Sys.time()
print(paste("Starting at",start_time))
cec = pension_fund(x, e, config$nSim)
print(paste("Stopping at",Sys.time()))
print(paste("Total runtime ", Sys.time() - start_time))
e$dS_
e$r
dim(e$dS_)
plot(e$dS_[,1])
plot.ts(e$dS_[,1])
eta_s
library(config)
rm(list=ls())
Sys.setenv(R_CONFIG_ACTIVE = "pension_fund")
config <- config::get()
source("pensionfund/pension_fund.R")
source("pensionfund/adjustment_factor.R")
source("simulation.R")
# Simulate the economy
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
eta_s
library(config)
rm(list=ls())
Sys.setenv(R_CONFIG_ACTIVE = "pension_fund")
config <- config::get()
source("pensionfund/pension_fund.R")
source("pensionfund/adjustment_factor.R")
source("simulation.R")
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
x = c(0.4740, 0.7363)
x = c(0.4740, 0)
start_time = Sys.time()
print(paste("Starting at",start_time))
cec = pension_fund(x, e, config$nSim)
print(paste("Stopping at",Sys.time()))
print(paste("Total runtime ", Sys.time() - start_time))
pension_fund <- function(x, E, nSim, T=600, afx=1, gamma=5, p=0.2) {
#' pension_fund() simulates a pension fund with portfolio weights x,
#' the function returns the certainty equivalent of consumption based on
#' T years and nSim simulations.
#'
#' @param x: weight of portfolio
#' @param E: list with economic data
#' @param nSim: number of simulations
#' @param afx: adjustment factor option
#'
#' @return: certainty equivalent of consumption (CEC)
#'
#' @examples
# library(foreach)
library(parallel)
# library(doSNOW)
Tw = 40
Tp = 25
# Q-matrix
Q = matrix(0, Tw + Tp, Tw + Tp)
for (i in 1:(Tw+Tp)) {
for (j in 1:(Tw+Tp)) {
if (((i + j) > (Tw + 1)) & ((i + j) < (Tw + Tp + 2))) {
Q[i,j] = 1
}
}
}
# Create B-matrix, everyone receives 40% of their salary as pension
B = array(0, c(Tw + Tp, Tw + Tp, T+1))
disc = .4 * c(seq(1/Tw, 1, by=1/Tw), rep(1, Tp))
B[,,1] = sweep(Q, 2, E$w[1] * disc, "*")
A           = matrix(0, T+1, 1)
L           = matrix(0, T+1, 1)
discB       = array(0, c(Tw+Tp, Tw+Tp, T+1))
Ink         = matrix(0, T, 1)
Uit         = matrix(0, T, 1)
Obl         = matrix(0, T, 1)
CR          = matrix(1, T, 1)
v           = array(0, c(Tw+Tp, Tw+Tp, T+1))
ind         = matrix(0, T, 1)
ksi         = matrix(0, T, 1)
U           = matrix(0, T-Tp+1, nSim)
CRstrike    = 0
afag        = matrix(0, 1, Tw+Tp)
alpha = matrix(1, Tw+Tp, 1)
alpha[1:9] = seq(0.1,0.9,0.1)
af = adjustment_factor(Tw, Tp, afx)
af = if(afx==4) af(beta) else af()
# Needed for utility
u       = function(x, gamma=5) x^(1-gamma) / (1-gamma)
# Rho option 1
# rho     = 1 / (1 + mean(E$r))
# Rho option 2
Xagg    = t(sapply(1:2, function(i) colSums(E$X[i,,]))) / nSim
rho     = 1 / (1 + E$delta_r[1] + mean(E$delta_r[2:3] %*% Xagg))
B[,,2] = B[,,1]
# U <- foreach(s=1:nSim, .combine=cbind, .inorder=FALSE) %dopar% {
for (s in 2:2) {
print(paste0("Running simulation: ", s,"/",nSim))
# wrapper <- function(s) {
discB[,,1] = B[,,1] * E$P[,s,1]
discB[,,2] = B[,,2] * E$P[,s,2]
# TODO: build adjustment factor for adjust.. achievable pension..
if (afx == 3) {
}
L[1] = sum(discB[,,1])
A[1] = L[1]
for (year in 2:T) {
# Update assets and liabilities, and compute new coverage ratio
B_year        = B[,,(year-1)]
discB[,,year] = B_year * E$P[,s,year]
L[year]       = sum(discB[,,year])
A[year]       = A[year-1] * ( x[1] * (1 + E$dS_[year,s]) + (1 - x[1] - x[2]) * (1 + E$r[year,s]) ) + x[2] * CR[year-1] * L[year]
CR[year]      = A[year] / L[year]
print(CR[year])
# Add penalty if coverage ratio is under 100%
if (CR[year] < 1) {
CRstrike = CRstrike + 1
} else {
CRstrike = 0
}
if (CRstrike == 5) {
ind[year] = CR[year] - 1
# ksi[year]  = ind[year] * L[year] / sum(sweep(sweep(B[,,year], 2, alpha * af, "*"), 1, E$P[,s,year], "*"))
ksi[year]  = ind[year] * L[year] / sum(t(t(B_year) * c(alpha*af)) * E$P[,s,year])
v[,,year]  = ksi[year] * alpha %*% t(af)
} else if ( CR[year] > 0.9 & CR[year] < 1.2) {
ind[year] = (A[year] - L[year]) / (9 * A[year] + L[year])
ksi[year] = ind[year] * L[year] / sum(t(t(B_year) * af) * E$P[,s,year])
v[,,year] = ksi[year] * rep(1, Tw + Tp) %*% t(af)
} else if ( CR[year] > 1.2) {
ind[year] = (A[year] - L[year]) / (4 * A[year] + L[year])
ksi[year] = ind[year] * L[year] / sum(t(t(B_year) * af) * E$P[,s,year])
v[,,year] = ksi[year] * rep(1, Tw + Tp) %*% t(af)
} else {
ind[year] = CR[year] / 0.9 - 1
ksi[year] = ind[year] * L[year] / sum(t(t(B_year) * c(alpha*af)) * E$P[,s,year])
v[,,year] = ksi[year] * alpha %*% af
}
Ink[year] = Tw * p * E$w[year,s]
B_year = (1 + v[,,year]) * B_year
# Nonnegativity restriction for pensions
# B_year = (abs(B_year) + B_year)/2
discB[,,year] = B_year * E$P[,s,year]
L[year]       = sum(discB[,,year])
CR[year]      = A[year] / L[year]
Uit[year]     = sum(B_year[1, (Tw+1):(Tw+Tp)])
# print(paste("Going in:",Ink[year]))
# print(paste("Going out:",Uit[year]))
# print(paste("Balance:", A[year]))
#
A[year] = A[year] - Uit[year] + Ink[year]
B_tmp = B_year[2:(Tw+Tp), 1:(Tw+Tp-1)]
B_year = matrix(0, Tw+Tp, Tw+Tp)
B_year[1:(Tw+Tp-1), 2:(Tw+Tp)] = B_tmp
# Update outstanding payoffs with incoming wage
B[,,year] = B_year + t(t(Q) * ((p*E$w[year,s]) / colSums(E$P2[,s,year] * Q)))
discB[,,year] = B[,,year] * E$P2[,s,year]
L[year] = sum(discB[,,year])
CR[year] = A[year] / L[year]
# TODO
if (afx == 3) {
}
} # end time loop
U_ = rep(0, T-Tp+1)
# Compute utility
rho_ = 1 / (mean(E$r[,s]) + 1)
for (j in (-Tw:(T-Tw-Tp))) {
U[j+Tw+1,s] = 0
for (t in (j+Tw+1):(j+Tw+Tp)) {
# U_[j+Tw+1, s] = U[j+Tw+1, s] + rho_^(t-j-Tw-1) * u(B[1,t-j,t] / E$Pi[t,s])
U_[j+Tw+1] = U[j+Tw+1, s] + rho_^(t-j-Tw-1) * u(B[1,t-j,t] / E$Pi[t,s])
}
}
U_
} # end simulation loop
# # Create clusters
# numCores <- detectCores()
# ncores <- floor(numCores/3)
# print(paste("Running pension_fund() parallel on", ncores, "cores..."))
# clust <- makeCluster(ncores)
# on.exit(stopCluster(clust))
#
# parallel::clusterExport(clust, varlist=c("x", "E", "T", "afx", "gamma", "p"), envir=environment())
# U = parSapply(clust, 1:nSim, wrapper)
welfare = rowSums(U)
plot.ts(welfare[100:length(welfare)])
SW = sum(rho^(100:length(welfare)) * welfare[100:length(welfare)])
CEC = -((SW*(1-rho)^2 * (1-gamma)) / ((1-rho^Tp)*rho^101))^((1-gamma)^(-1))
}
library(config)
rm(list=ls())
Sys.setenv(R_CONFIG_ACTIVE = "pension_fund")
config <- config::get()
source("pensionfund/pension_fund.R")
source("pensionfund/adjustment_factor.R")
source("simulation.R")
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
x = c(0.4740, 0.7363)
x = c(0.4740, 0)
start_time = Sys.time()
print(paste("Starting at",start_time))
cec = pension_fund(x, e, config$nSim)
print(paste("Stopping at",Sys.time()))
print(paste("Total runtime ", Sys.time() - start_time))
library(config)
rm(list=ls())
Sys.setenv(R_CONFIG_ACTIVE = "pension_fund")
config <- config::get()
source("pensionfund/pension_fund.R")
source("pensionfund/adjustment_factor.R")
source("simulation.R")
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
x = c(0.4740, 0.7363)
x = c(0.4740, 0)
start_time = Sys.time()
print(paste("Starting at",start_time))
cec = pension_fund(x, e, config$nSim)
print(paste("Stopping at",Sys.time()))
print(paste("Total runtime ", Sys.time() - start_time))
cec
library(config)
rm(list=ls())
Sys.setenv(R_CONFIG_ACTIVE = "pension_fund")
config <- config::get()
source("pensionfund/pension_fund.R")
source("pensionfund/adjustment_factor.R")
source("simulation.R")
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
x = c(0.4740, 0.7363)
x = c(0.4740, 0)
start_time = Sys.time()
print(paste("Starting at",start_time))
cec = pension_fund(x, e, config$nSim)
print(paste("Stopping at",Sys.time()))
print(paste("Total runtime ", Sys.time() - start_time))
cec
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
x = c(0.4740, 0.7363)
# x = c(0.4740, 0)
start_time = Sys.time()
print(paste("Starting at",start_time))
cec = pension_fund(x, e, config$nSim)
e$P2
e$pi
e$dS_
plot(e$dS_[,1])
plot.ts(e$dS_[,1])
plot.ts(e$r[,1])
library(config)
rm(list=ls())
Sys.setenv(R_CONFIG_ACTIVE = "pension_fund")
config <- config::get()
source("pensionfund/pension_fund.R")
source("pensionfund/adjustment_factor.R")
source("simulation.R")
# Simulate the economy
if (config$load_economy) {
load(config$save_path)
} else {
e = simulate_economy(
paramfile = config$parameters_path,
dt = config$dt,
T = config$T,
nSim = config$nSim,
w = config$w,
maturities = config$maturities,
parallel = config$parallel,
save_economy = config$save_economy,
save_path = config$save_path)
}
