setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
data[,4:63] = data[,4:63]/100
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
data[,4:63] = data[,4:63]/100
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
data[,4:63] = data[,4:63]/100
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
profvis::profvis({#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
data[,4:63] = data[,4:63]/100
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)})
library(doParallel)
library(parallel)
install.packages("doParallel")
library(doParallel)
library(parallel)
detectCores(logical=T)
cl <- makeCluster(5)
registerDoParallel(cl)
clusterExport(cl,list('fA', 'fAprime', 'fB'))
fB <- function(tau) {
sapply(tau, function(tau) if (tau==0) 0 else solve(t(K) + t(Lambda)) %*% (expm(-(t(K) + t(Lambda))*tau) - diag(2)) %*% delta_r[2:3])
}
fAprime <- function(tau) {
sapply(tau, function(tau)  if (tau==0) 0 else -t(fB(tau)) %*% lambda + 0.5 * t(fB(tau)) %*% fB(tau) - delta_r[1])
}
# Bprime <- function(tau) {
#   - (t(K) + t(Lambda)) %*% B(tau) - delta_r[2:3]
# }
fA <- function(tau) {
p = sapply(seq(length(tau)-1), function(k) integrate(fAprime, tau[k], tau[k+1])$value)
cumsum(p)
}
clusterExport(cl,list('fA', 'fAprime', 'fB'))
m = 60
# delta_pi = rnorm(3, 0 , 0.1) # c(0,0,0)
# delta_r = rnorm(3, 0 , 0.1) # c(0,0,0)
# K = runif(3, 0, 1) # c(0,0,0)
# sigma_pi = rnorm(3, 0, 0.2) # c(0,0,0)
# sigma_s = rnorm(4, 0, 0.2) #c(0,0,0,0)
# eta_s = rnorm(1, 0, 0.2)
# lambda = rnorm(2, 0, 0.1) # c(0,0)
# Lambda = rnorm(4, 0, 0.1) # c(0,0,0,0)
# h = rep(0.1,m)
delta_pi = c(0.0158, -0.0028, -0.0014) #rnorm(3, 0 , 0.1) # c(0,0,0)
delta_r = c(0.0097, -0.0094, -0.0024) #rnorm(3, 0 , 0.1) # c(0,0,0)
K = c(0.0479, 0.5440, 1.2085) #runif(3, 0, 1) # c(0,0,0)
sigma_pi = c(-0.0010, 0.0013, 0.0055) #rnorm(3, 0, 0.2) # c(0,0,0)
sigma_s = c(-0.0483, 0.0078, 0.0010, 0.1335) #rnorm(4, 0, 0.2) #c(0,0,0,0)
eta_s = 0.0451 #rnorm(1, 0, 0.2)
lambda = c(0.6420, -0.0240) # rnorm(2, 0, 0.1) # c(0,0)
Lambda = c(0.1710, 0.3980, -0.5140, -1.1470) #rnorm(4, 0, 0.1) # c(0,0,0,0)
h = rep(0.0005,m)
param=c(delta_pi,
delta_r,
K,
sigma_pi,
sigma_s,
eta_s,
lambda,
Lambda,
h)
m = 60
k = 2
delta_pi = param[1:3]
delta_r = param[4:6]
K = param[7:9]
K = matrix(c(K[1],K[2],0,K[3]), 2, 2)
sigma_pi = c(param[10:12], 0)
sigma_s = param[13:16]
eta_s = param[17]
lambda = param[18:19]
Lambda = param[20:23]
Lambda = matrix(lambda, 2, 2)
h = param[24:length(param)]
h = 1/12
# (eq. 3.1 Pelsser (2019))
a_ = rbind(
rbind(0,0),
delta_pi[1] - 0.5 * t(sigma_pi) %*% sigma_pi,
delta_r[1] + eta_s - 0.5 * t(sigma_s) %*% sigma_s
)
A_ = rbind(
-K,
delta_pi[2:3],
delta_r[2:3]
)
C_ = rbind(
cbind(diag(2), matrix(0,2,2)),
as.vector(sigma_pi),
as.vector(sigma_s)
)
r = eigen(C_)
U = r$vectors
D = r$values
Uinv = solve(U)
alpha <- function(x) sapply(x, function(x) {if (x == 0) 1 else ((exp(x) - 1) / x)})
F_ = diag(h * alpha(D * h))
phi = U %*% F_ %*% Uinv %*% a_
Phi = expm(C_ * h)
# Create V matrix with loop
V = matrix(0, 4, 4)
for (i in 1:4) {
for (j in 1:4) {
V[i,j] = (Uinv %*% C_ %*% t(C_) %*% t(Uinv))[i,j] * h * alpha((D[i] + D[j]) * h)
}
}
Q = U %*% V %*% t(U)
fB <- function(tau) {
sapply(tau, function(tau) if (tau==0) 0 else solve(t(K) + t(Lambda)) %*% (expm(-(t(K) + t(Lambda))*tau) - diag(2)) %*% delta_r[2:3])
}
fAprime <- function(tau) {
sapply(tau, function(tau)  if (tau==0) 0 else -t(fB(tau)) %*% lambda + 0.5 * t(fB(tau)) %*% fB(tau) - delta_r[1])
}
# Bprime <- function(tau) {
#   - (t(K) + t(Lambda)) %*% B(tau) - delta_r[2:3]
# }
fA <- function(tau) {
p = sapply(seq(length(tau)-1), function(k) integrate(fAprime, tau[k], tau[k+1])$value)
cumsum(p)
}
cl <- makeCluster(5)
registerDoParallel(cl)
clusterExport(cl,list('fA', 'fAprime', 'fB'))
parLapply(cl, 0:60, fun=fA)
fA <- function(tau) {
p = sapply(seq(length(tau)-1), function(k) integrate(fAprime, tau[k], tau[k+1])$value)
# cumsum(p)
}
cl <- makeCluster(5)
registerDoParallel(cl)
clusterExport(cl,list('fA', 'fAprime', 'fB'))
parLapply(cl, 0:60, fun=fA)
myfun = function(k) integrate(fAprime, tau[k], tau[k+1])$value
clusterExport(cl,list('myfun', 'fA', 'fAprime', 'fB'))
seq(60)
parLapply(cl, seq(60), fun=fA)
parLapply(cl, seq(60), fun=myfun)
clusterExport(cl,list('myfun', 'fA', 'fAprime', 'fB'. 'tau'))
tau=0:60
clusterExport(cl,list('myfun', 'fA', 'fAprime', 'fB'. 'tau'))
clusterExport(cl,list('myfun', 'fA', 'fAprime', 'fB', 'tau'))
cl
parLapply(cl, seq(60), fun=myfun)
clusterExport(cl,list('myfun', 'fA', 'fAprime', 'fB', 'tau','K'))
parLapply(cl, seq(60), fun=myfun)
clusterExport(cl,list('myfun', 'fA', 'fAprime', 'fB', 'tau','K', 'Lambda', 'delta_r'))
parLapply(cl, seq(60), fun=myfun)
clusterExport(cl,list('myfun', 'fA', 'fAprime', 'fB', 'tau','K', 'Lambda', 'delta_r', 'expm'))
parLapply(cl, seq(60), fun=myfun)
clusterExport(cl,list('myfun', 'fA', 'fAprime', 'fB', 'tau','K', 'Lambda', 'delta_r', 'expm', 'lambda'))
parLapply(cl, seq(60), fun=myfun)
parLapply(cl, seq(60), fun=myfun)
unlist(parLapply(cl, seq(60), fun=myfun))
profvis::profvis({#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
library(doParallel)
library(parallel)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
data[,4:63] = data[,4:63]/100
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)})
source('~/thesis-qf/code/utils/parameters.R')
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
library(doParallel)
library(parallel)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
data[,4:63] = data[,4:63]/100
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
library(doParallel)
library(parallel)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
data[,4:63] = data[,4:63]/100
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
fA <- function(tau) {
# p = sapply(seq(length(tau)-1), function(k) integrate(fAprime, tau[k], tau[k+1])$value)
# cumsum(p)
integrate(fAprime, tau[k], tau[k+1])$value
}
fA
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
library(doParallel)
library(parallel)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
data[,4:63] = data[,4:63]/100
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
library(doParallel)
library(parallel)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
data[,4:63] = data[,4:63]/100
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
library(doParallel)
library(parallel)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
data[,4:63] = data[,4:63]/100
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
library(doParallel)
library(parallel)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
data[,4:63] = data[,4:63]/100
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
