y = exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw-1):0, rep(0,Tp))^2)
}
df = data.frame(x, uniform(), threetwoone(), opt_af(c(0.0037, -0.0265, 0.0018)))
colnames(df) = c('x', 'y1', 'y2', 'y3')
ggplot(df, aes(x=x)) +
geom_line(aes(y=y1)) +
geom_line(aes(y=y2)) +
geom_line(aes(y=y3)) +
ylim(0,5) +
xlim(0,70)
y = exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw):0, rep(0,Tp))^2)
library(ggplot2)
Tw = 40
Tp = 25
x = 1:(Tw + Tp)
print(x)
uniform <- function() {
y = rep(1, 65)
}
threetwoone <- function() {
y = c(
rep(3, 30),
rep(2, 10),
rep(1, 25)
)
}
opt_af <- function(beta) {
y = exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw):0, rep(0,25)) + beta[3] * c((Tw):0, rep(0,Tp))^2)
}
df = data.frame(x, uniform(), threetwoone(), opt_af(c(0.0037, -0.0265, 0.0018)))
colnames(df) = c('x', 'y1', 'y2', 'y3')
ggplot(df, aes(x=x)) +
geom_line(aes(y=y1)) +
geom_line(aes(y=y2)) +
geom_line(aes(y=y3)) +
ylim(0,5) +
xlim(0,70)
library(ggplot2)
Tw = 40
Tp = 25
x = 1:(Tw + Tp)
print(x)
uniform <- function() {
y = rep(1, 65)
}
threetwoone <- function() {
y = c(
rep(3, 30),
rep(2, 10),
rep(1, 25)
)
}
opt_af <- function(beta) {
y = exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw1):0, rep(0,Tp))^2)
}
df = data.frame(x, uniform(), threetwoone(), opt_af(c(0.0037, -0.0265, 0.0018)))
colnames(df) = c('x', 'y1', 'y2', 'y3')
ggplot(df, aes(x=x)) +
geom_line(aes(y=y1)) +
geom_line(aes(y=y2)) +
geom_line(aes(y=y3)) +
ylim(0,5) +
xlim(0,70)
library(ggplot2)
Tw = 40
Tp = 25
x = 1:(Tw + Tp)
print(x)
uniform <- function() {
y = rep(1, 65)
}
threetwoone <- function() {
y = c(
rep(3, 30),
rep(2, 10),
rep(1, 25)
)
}
opt_af <- function(beta) {
y = exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw-1):0, rep(0,Tp))^2)
}
df = data.frame(x, uniform(), threetwoone(), opt_af(c(0.0037, -0.0265, 0.0018)))
colnames(df) = c('x', 'y1', 'y2', 'y3')
ggplot(df, aes(x=x)) +
geom_line(aes(y=y1)) +
geom_line(aes(y=y2)) +
geom_line(aes(y=y3)) +
ylim(0,5) +
xlim(0,70)
opt_af(c(0.0037, -0.0265, 0.0018))
print(opt_af(c(0.0037, -0.0265, 0.0018)))
length(print(opt_af(c(0.0037, -0.0265, 0.0018))))
length(opt_af(c(0.0037, -0.0265, 0.0018)))
length(((Tw + Tp - 1):0))
length(c((Tw-1):0, rep(0,25)))
c((Tw-1):0, rep(0,25))
y = exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw-1):0, rep(0,Tp))^2)
y
library(ggplot2)
Tw = 40
Tp = 25
x = 1:(Tw + Tp)
print(x)
uniform <- function() {
y = rep(1, 65)
}
threetwoone <- function() {
y = c(
rep(3, 30),
rep(2, 10),
rep(1, 25)
)
}
opt_af <- function(beta) {
y = exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw-1):0, rep(0,Tp))^2)
}
df = data.frame(x, uniform(), threetwoone(), opt_af(c(0.0037, -0.0265, 0.0016)))
colnames(df) = c('x', 'y1', 'y2', 'y3')
ggplot(df, aes(x=x)) +
geom_line(aes(y=y1)) +
geom_line(aes(y=y2)) +
geom_line(aes(y=y3)) +
ylim(0,5) +
xlim(0,70)
df = data.frame(x, uniform(), threetwoone(), opt_af(c(0.0037, -0.0465, 0.0016)))
library(ggplot2)
Tw = 40
Tp = 25
x = 1:(Tw + Tp)
print(x)
uniform <- function() {
y = rep(1, 65)
}
threetwoone <- function() {
y = c(
rep(3, 30),
rep(2, 10),
rep(1, 25)
)
}
opt_af <- function(beta) {
y = exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw-1):0, rep(0,Tp))^2)
}
df = data.frame(x, uniform(), threetwoone(), opt_af(c(0.0037, -0.0465, 0.0016)))
colnames(df) = c('x', 'y1', 'y2', 'y3')
ggplot(df, aes(x=x)) +
geom_line(aes(y=y1)) +
geom_line(aes(y=y2)) +
geom_line(aes(y=y3)) +
ylim(0,5) +
xlim(0,70)
df = data.frame(x, uniform(), threetwoone(), opt_af(c(0.0037, -0.0265, 0.0016)))
library(ggplot2)
Tw = 40
Tp = 25
x = 1:(Tw + Tp)
print(x)
uniform <- function() {
y = rep(1, 65)
}
threetwoone <- function() {
y = c(
rep(3, 30),
rep(2, 10),
rep(1, 25)
)
}
opt_af <- function(beta) {
y = exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw-1):0, rep(0,Tp))^2)
}
df = data.frame(x, uniform(), threetwoone(), opt_af(c(0.0037, -0.0265, 0.0016)))
colnames(df) = c('x', 'y1', 'y2', 'y3')
ggplot(df, aes(x=x)) +
geom_line(aes(y=y1)) +
geom_line(aes(y=y2)) +
geom_line(aes(y=y3)) +
ylim(0,5) +
xlim(0,70)
c((Tw-1):0, rep(0,25))
c((Tw-1):0, rep(0,Tp))^2
beta
rm(beta)
library(ggplot2)
Tw = 40
Tp = 25
x = 1:(Tw + Tp)
print(x)
uniform <- function() {
y = rep(1, 65)
}
threetwoone <- function() {
y = c(
rep(3, 30),
rep(2, 10),
rep(1, 25)
)
}
opt_af <- function(beta) {
y = exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw-1):0, rep(0,Tp))^2)
}
df = data.frame(x, uniform(), threetwoone(), opt_af(c(0.0037, -0.0265, 0.0016)))
colnames(df) = c('x', 'y1', 'y2', 'y3')
ggplot(df, aes(x=x)) +
geom_line(aes(y=y1)) +
geom_line(aes(y=y2)) +
geom_line(aes(y=y3)) +
ylim(0,5) +
xlim(0,70)
library(ggplot2)
Tw = 40
Tp = 25
x = 1:(Tw + Tp)
print(x)
uniform <- function() {
y = rep(1, 65)
}
threetwoone <- function() {
y = c(
rep(3, 30),
rep(2, 10),
rep(1, 25)
)
}
opt_af <- function(beta) {
y = exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw-1):0, rep(0,Tp))^2)
}
df = data.frame(x, uniform(), threetwoone(), opt_af(c(0.0037, -0.0265, 0.0018)))
colnames(df) = c('x', 'y1', 'y2', 'y3')
ggplot(df, aes(x=x)) +
geom_line(aes(y=y1)) +
geom_line(aes(y=y2)) +
geom_line(aes(y=y3)) +
ylim(0,5) +
xlim(0,70)
exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw-1):0, rep(0,Tp))^2)
beta
beta = c(0.0037, -0.0265, 0.0018)
beta
exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw-1):0, rep(0,Tp))^2)
c((Tw-1):0, rep(0,Tp))^2
exp(beta[1] * ((Tw + Tp - 1):0) + beta[2] * c((Tw-1):0, rep(0,25)) + beta[3] * c((Tw-1):0, rep(0,Tp))^2)
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
debugSource('~/thesis-qf/code/kalman.R')
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
V
B
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
V
V
H
View(H)
B
Phat
Phat[,,t]
P0
Phat
Phat[,,t]
Phat
Phi
P
P[,,(t-1)]
t(Phi)
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
print(Q)
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
print(Q)
debugSource('~/thesis-qf/code/utils/parameters.R')
debugSource('~/thesis-qf/code/utils/parameters.R')
debugSource('~/thesis-qf/code/utils/parameters.R')
#################################
## -- Load all dependencies -- ##
#################################
rm(list=ls())
setwd("~/thesis-qf/code")
source('optimizer.R')
source('kalman.R')
source('utils/loglikelihood.R')
source('utils/parameters.R')
library(ggplot2)
library(expm)
######################
## -- Load data --  ##
######################
load('../data/data.Rda')
# Get subset of data that is available
data = DT[409:622,1:63]
data$MSCI = log(data$MSCI)
data$HICP = log(data$HICP)
# Plot data
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=MSCI)) +
#   ggtitle('MSCI Stock Index')
#
# ggplot(data, aes(x=Date)) +
#   geom_line(aes(x=Date, y=HICP)) +
#   ggtitle('HICP')
#########################
## -- Kalman filter -- ##
#########################
res = kalman_optimizer(data)
